* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

header {
    background-color: aqua;
    color: white;
    font-family: 'Times New Roman', Times, serif;
    text-shadow: 5px 5px 5px black;
    text-align: center;
}

/* si el contenedor es flex los hijos tambien */

.contenedor {
    background-color: burlywood;
    /* flex los hijos los adapta al ancho y todo en 
    una misma linea. Flex de flexible, siempre en el 
    contenedor padre. */
    display: flex;

    /* flex-direction: row; */
    /* por defecto es flex-wrap: nowrap; no permite el
    desbordamiento*/
    /* para mantener las dimensiones y que haya un corte
    de linea es  wrap , el cual permite 
    el desbordamiento*/
    
    /* flex-wrap: wrap; */
    /* para mostrar los contenedores en orden inverso */
    /* flex-wrap: wrap-reverse; */
    
    /* flex-flow es una propiedad de atajo para 
    flex-direction y flex-wrap */
    
    /* en este caso ubica en tres columnas de dos filas
    c/u y comienza desde arriba a la derecha */

    flex-flow: row wrap;
    height: 50vh;

    /* para juntar los items se debe achicar el contenedor height: 30vh; 
    y para encimarlos se juega con un margen negativo*/

    /* posicionamiento sobre el eje principal, 
    ver flex-direction o flex-flow (por defecto es row)
    */
    justify-content: flex-start;

    /* posicionamiento sobre el eje secundario
    si el eje principal es row dicho posicionamiento
    sera sobre column */
    
    /* no funciona si el hijo asigna un height o si 
    flex-direction es column + nowrap */
    /* align-items: flex-start; */
    
    /* gap da un espacio extra, suma el espacio a la configuracion
    previa (ej: justify-content: space-around;) 
    No se extiende más allá de su contenedor*/
    /* el valor de gap se setea en el contenedor! */

    /* gap: 50px 80px;  */
    /* gap: espacio entre lineas (row-gap) espacio entre columnas (column-gap) */

    /* gap: 50px; */
    /* gap: espacio entre lineas y entre columnas */



    /* transition: width 2s, height 2s, background-color 2s, rotate 2s; */


    
}

.item-contenedor {
    /* inline es la minima expresion del div */
    /* inline-block agrupa los div en filas y columnas 
    como si fuera una tabla mantiene la misma proporciones*/
    /* block encolumnado */
    /* display: inline-block; */
    background-color: cadetblue;
    width: 150px;
    /* si usa stretch en el contenedor no se usa height */
    /* height: 150px; */
    /* margin: 10px; */
    border: 1px solid black;
    /* margin: -10px;  margen negativo para encimar los elementos*/
    

    /* darle estilos a las letras en el centro de la caja */
    font-weight: bolder;
    font-size: 3rem;
    color: wheat;
    /* centro de la caja en row */
    text-align: center;

    /* centrar la letra a la caja (columna) */
    line-height: 150px;

    /* flex basis */
    flex-basis: 25%;

}

img {
    width: 150px;
    height: 150px;
}

/* .item-contenedor:hover {
    background-color: rgb(8, 8, 58);
    
} */

#item-c:hover{
    /* cuando paso el mouse sobre el item c
    aplico align-self (align-items para el hijo)
    al hijo del contenedor (.item-contenedor) */
    align-self: flex-start;
}

/* con order se cambia el orden que son expuestos
las cajas en vez de ABCD es BDAC tener en cuenta
el flex-flow / flex-direction */

/* order: muestra el orden asignado, a los que no se
asigna el order se muestran primero y en el orden del html*/

#item-a{
    order: 0;
    height: 50%;
    align-self: stretch;
}
#item-b{
    order: 1;
    /* height: 40%; */
    /* align-self: baseline; */
    /* baseline (default) */
}
#item-c{
    /* order: 10; si es mayor a la cantidad de item lo pone al final */
}
#item-d{
    /* order: -1; si es menor a cero se ubica primero */
}