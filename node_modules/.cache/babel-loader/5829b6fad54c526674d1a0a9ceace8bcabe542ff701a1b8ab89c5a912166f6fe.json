{"ast":null,"code":"// Aquí se codificará \n// la función reductora y el estado inicial\n\n// se importan los tipos de accion\n// import { stat } from \"fs\";\nimport { TYPES } from \"./Types\";\n\n// se exporta el estado inicial\n// el estado inicial sera una lista de productos\n\n// src es una imagen que se asociara al producto\nexport const carritoInitialState = {\n  productosArray: [{\n    id: 1,\n    nombre: 'Producto A',\n    src: '',\n    precio: 100,\n    stock: 20\n  }, {\n    id: 2,\n    nombre: 'Producto B',\n    src: '',\n    precio: 200,\n    stock: 20\n  }, {\n    id: 3,\n    nombre: 'Producto C',\n    src: '',\n    precio: 300,\n    stock: 20\n  }, {\n    id: 4,\n    nombre: 'Producto D',\n    src: '',\n    precio: 400,\n    stock: 20\n  }, {\n    id: 5,\n    nombre: 'Producto E',\n    src: '',\n    precio: 500,\n    stock: 20\n  }, {\n    id: 6,\n    nombre: 'Producto F',\n    src: '',\n    precio: 600,\n    stock: 20\n  }],\n  cart: [] //el carrito debe estar vacío al comienzo\n  // cart se adjuntarán los productos que se\n  // quieren comprar\n};\n\n// FUNCION REDUCTORA\nexport const carritoReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_TO_CART:\n      {\n        // confuguro la funcion reductora que viene de Cart.js (dispach)\n        // voy a recibir el id del producto para luego agregarlo\n        // el arreglo cart\n        // console.log(action.payload);\n\n        // buscar el id que sea igual al payload que recibo y luego guardarlo en nuevoItem\n        const nuevoItem = state.productosArray.find(product => product.id === action.payload);\n\n        // ahora si es la segunda vez que presiono el moismo\n        // boton agregar voy a buscar en el carrito si existe\n        // el producto\n        const itemEnCarrito = state.cart.find(item => item.id === action.payload);\n\n        // if ternario si esta el producto en el carrito ? agrego otro : agrego el primero\n        return itemEnCarrito ? {\n          // si esta el item en el carrito\n          ...state,\n          // recorrer con un map para cambiar la cantidad\n          // de productos comptados\n          cart: state.cart.map(item => item.id === nuevoItem.id)\n        } : {\n          // retorará el nuevo producto al cart (objeto)\n          // dejo el estado como viene\n          ...state,\n          // agrego en cart lo que tengo cargado + {...nuevoItem, cantidad}\n          // como es la primera vez que se cliquea agregar lo seteo en 1\n          cart: [...state.cart, {\n            ...nuevoItem,\n            cantidad: 1\n          }]\n        };\n      }\n    case TYPES.REMOVE_ITEM:\n      {\n        break;\n      }\n    case TYPES.REMOVE_ALL_ITEMS:\n      {\n        break;\n      }\n    case TYPES.CLEAR_CART:\n      {\n        break;\n      }\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["TYPES","carritoInitialState","productosArray","id","nombre","src","precio","stock","cart","carritoReducer","state","action","type","ADD_TO_CART","nuevoItem","find","product","payload","itemEnCarrito","item","map","cantidad","REMOVE_ITEM","REMOVE_ALL_ITEMS","CLEAR_CART"],"sources":["/home/patricio/Escritorio/imt/numen2023/src/components/carrito/actions/carritoReducer.js"],"sourcesContent":["// Aquí se codificará \n// la función reductora y el estado inicial\n\n// se importan los tipos de accion\n// import { stat } from \"fs\";\nimport { TYPES } from \"./Types\";\n\n// se exporta el estado inicial\n// el estado inicial sera una lista de productos\n\n// src es una imagen que se asociara al producto\nexport const carritoInitialState = {\n    productosArray: [\n    { id: 1, nombre: 'Producto A', src: '', precio: 100, stock: 20 },\n    { id: 2, nombre: 'Producto B', src: '', precio: 200, stock: 20 },\n    { id: 3, nombre: 'Producto C', src: '', precio: 300, stock: 20 },\n    { id: 4, nombre: 'Producto D', src: '', precio: 400, stock: 20 },\n    { id: 5, nombre: 'Producto E', src: '', precio: 500, stock: 20 },\n    { id: 6, nombre: 'Producto F', src: '', precio: 600, stock: 20 }\n    ],\n    cart: []   //el carrito debe estar vacío al comienzo\n    // cart se adjuntarán los productos que se\n    // quieren comprar\n}\n\n// FUNCION REDUCTORA\nexport const carritoReducer = (state, action) => { \n    switch (action.type) {\n        case TYPES.ADD_TO_CART: {\n            // confuguro la funcion reductora que viene de Cart.js (dispach)\n            // voy a recibir el id del producto para luego agregarlo\n            // el arreglo cart\n            // console.log(action.payload);\n            \n            // buscar el id que sea igual al payload que recibo y luego guardarlo en nuevoItem\n            const nuevoItem = state.productosArray.find(product => product.id === action.payload);\n\n            // ahora si es la segunda vez que presiono el moismo\n            // boton agregar voy a buscar en el carrito si existe\n            // el producto\n            const itemEnCarrito = state.cart.find(item => item.id === action.payload);\n\n\n            // if ternario si esta el producto en el carrito ? agrego otro : agrego el primero\n            return itemEnCarrito ? {\n                // si esta el item en el carrito\n                ...state,\n                // recorrer con un map para cambiar la cantidad\n                // de productos comptados\n                cart: state.cart.map(item=>item.id === nuevoItem.id)\n            } : {\n                // retorará el nuevo producto al cart (objeto)\n                // dejo el estado como viene\n                ...state,\n                // agrego en cart lo que tengo cargado + {...nuevoItem, cantidad}\n                // como es la primera vez que se cliquea agregar lo seteo en 1\n                cart: [...state.cart, { ...nuevoItem, cantidad: 1 }]\n            }\n            \n        }\n            \n        case TYPES.REMOVE_ITEM: {\n            break;\n        }\n        case TYPES.REMOVE_ALL_ITEMS: {\n            break;\n        }\n        case TYPES.CLEAR_CART: {\n            break;\n        }\n        default:\n            return state;\n    }\n};"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA,SAASA,KAAK,QAAQ,SAAS;;AAE/B;AACA;;AAEA;AACA,OAAO,MAAMC,mBAAmB,GAAG;EAC/BC,cAAc,EAAE,CAChB;IAAEC,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,CAC/D;EACDC,IAAI,EAAE,EAAE,CAAG;EACX;EACA;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC7C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKZ,KAAK,CAACa,WAAW;MAAE;QACpB;QACA;QACA;QACA;;QAEA;QACA,MAAMC,SAAS,GAAGJ,KAAK,CAACR,cAAc,CAACa,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACb,EAAE,KAAKQ,MAAM,CAACM,OAAO,CAAC;;QAErF;QACA;QACA;QACA,MAAMC,aAAa,GAAGR,KAAK,CAACF,IAAI,CAACO,IAAI,CAACI,IAAI,IAAIA,IAAI,CAAChB,EAAE,KAAKQ,MAAM,CAACM,OAAO,CAAC;;QAGzE;QACA,OAAOC,aAAa,GAAG;UACnB;UACA,GAAGR,KAAK;UACR;UACA;UACAF,IAAI,EAAEE,KAAK,CAACF,IAAI,CAACY,GAAG,CAACD,IAAI,IAAEA,IAAI,CAAChB,EAAE,KAAKW,SAAS,CAACX,EAAE;QACvD,CAAC,GAAG;UACA;UACA;UACA,GAAGO,KAAK;UACR;UACA;UACAF,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAI,EAAE;YAAE,GAAGM,SAAS;YAAEO,QAAQ,EAAE;UAAE,CAAC;QACvD,CAAC;MAEL;IAEA,KAAKrB,KAAK,CAACsB,WAAW;MAAE;QACpB;MACJ;IACA,KAAKtB,KAAK,CAACuB,gBAAgB;MAAE;QACzB;MACJ;IACA,KAAKvB,KAAK,CAACwB,UAAU;MAAE;QACnB;MACJ;IACA;MACI,OAAOd,KAAK;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}