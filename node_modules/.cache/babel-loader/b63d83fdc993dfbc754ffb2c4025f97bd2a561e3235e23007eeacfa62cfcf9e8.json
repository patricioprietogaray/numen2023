{"ast":null,"code":"// Aquí se codificará \n// la función reductora y el estado inicial\n\n// se importan los tipos de accion\nimport { stat } from \"fs\";\nimport { TYPES } from \"./Types\";\n\n// se exporta el estado inicial\n// el estado inicial sera una lista de productos\n\n// src es una imagen que se asociara al producto\nexport const carritoInitialState = {\n  productosArray: [{\n    id: 1,\n    nombre: 'Producto A',\n    src: '',\n    precio: 100,\n    stock: 20\n  }, {\n    id: 2,\n    nombre: 'Producto B',\n    src: '',\n    precio: 200,\n    stock: 20\n  }, {\n    id: 3,\n    nombre: 'Producto C',\n    src: '',\n    precio: 300,\n    stock: 20\n  }, {\n    id: 4,\n    nombre: 'Producto D',\n    src: '',\n    precio: 400,\n    stock: 20\n  }, {\n    id: 5,\n    nombre: 'Producto E',\n    src: '',\n    precio: 500,\n    stock: 20\n  }, {\n    id: 6,\n    nombre: 'Producto F',\n    src: '',\n    precio: 600,\n    stock: 20\n  }],\n  cart: [] //el carrito debe estar vacío al comienzo\n  // cart se adjuntarán los productos que se\n  // quieren comprar\n};\n\n// FUNCION REDUCTORA\nexport const carritoReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_TO_CART:\n      {\n        // confuguro la funcion reductora que viene de Cart.js \n        // voy a recibir el id del producto para luego agregarlo\n        // el arreglo cart\n        // console.log(action.payload);\n        // payload es lo que mandaba el reducer cuando despacha la accion\n        const nuevoItem = state.productosArray.find(item => item.id === action.payload);\n        break;\n      }\n    case TYPES.REMOVE_ITEM:\n      {\n        break;\n      }\n    case TYPES.REMOVE_ALL_ITEMS:\n      {\n        break;\n      }\n    case TYPES.CLEAR_CART:\n      {\n        break;\n      }\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["stat","TYPES","carritoInitialState","productosArray","id","nombre","src","precio","stock","cart","carritoReducer","state","action","type","ADD_TO_CART","nuevoItem","find","item","payload","REMOVE_ITEM","REMOVE_ALL_ITEMS","CLEAR_CART"],"sources":["/home/patricio/Escritorio/imt/numen2023/src/components/carrito/actions/carritoReducer.js"],"sourcesContent":["// Aquí se codificará \n// la función reductora y el estado inicial\n\n// se importan los tipos de accion\nimport { stat } from \"fs\";\nimport { TYPES } from \"./Types\";\n\n// se exporta el estado inicial\n// el estado inicial sera una lista de productos\n\n// src es una imagen que se asociara al producto\nexport const carritoInitialState = {\n    productosArray: [\n    { id: 1, nombre: 'Producto A', src: '', precio: 100, stock: 20 },\n    { id: 2, nombre: 'Producto B', src: '', precio: 200, stock: 20 },\n    { id: 3, nombre: 'Producto C', src: '', precio: 300, stock: 20 },\n    { id: 4, nombre: 'Producto D', src: '', precio: 400, stock: 20 },\n    { id: 5, nombre: 'Producto E', src: '', precio: 500, stock: 20 },\n    { id: 6, nombre: 'Producto F', src: '', precio: 600, stock: 20 }\n    ],\n    cart: []   //el carrito debe estar vacío al comienzo\n    // cart se adjuntarán los productos que se\n    // quieren comprar\n}\n\n// FUNCION REDUCTORA\nexport const carritoReducer = (state, action) => { \n    switch (action.type) {\n        case TYPES.ADD_TO_CART: {\n            // confuguro la funcion reductora que viene de Cart.js \n            // voy a recibir el id del producto para luego agregarlo\n            // el arreglo cart\n            // console.log(action.payload);\n            // payload es lo que mandaba el reducer cuando despacha la accion\n            const nuevoItem = state.productosArray.find(item => item.id === action.payload);\n            break;\n        }\n            \n        case TYPES.REMOVE_ITEM: {\n            break;\n        }\n        case TYPES.REMOVE_ALL_ITEMS: {\n            break;\n        }\n        case TYPES.CLEAR_CART: {\n            break;\n        }\n        default:\n            return state;\n    }\n};"],"mappings":"AAAA;AACA;;AAEA;AACA,SAASA,IAAI,QAAQ,IAAI;AACzB,SAASC,KAAK,QAAQ,SAAS;;AAE/B;AACA;;AAEA;AACA,OAAO,MAAMC,mBAAmB,GAAG;EAC/BC,cAAc,EAAE,CAChB;IAAEC,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,EAChE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,YAAY;IAAEC,GAAG,EAAE,EAAE;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAG,CAAC,CAC/D;EACDC,IAAI,EAAE,EAAE,CAAG;EACX;EACA;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC7C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKZ,KAAK,CAACa,WAAW;MAAE;QACpB;QACA;QACA;QACA;QACA;QACA,MAAMC,SAAS,GAAGJ,KAAK,CAACR,cAAc,CAACa,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACb,EAAE,KAAKQ,MAAM,CAACM,OAAO,CAAC;QAC/E;MACJ;IAEA,KAAKjB,KAAK,CAACkB,WAAW;MAAE;QACpB;MACJ;IACA,KAAKlB,KAAK,CAACmB,gBAAgB;MAAE;QACzB;MACJ;IACA,KAAKnB,KAAK,CAACoB,UAAU;MAAE;QACnB;MACJ;IACA;MACI,OAAOV,KAAK;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}