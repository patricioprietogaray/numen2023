{"ast":null,"code":"var _jsxFileName = \"/home/patricio/Escritorio/imt/numen2023/src/App.js\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Pregunta from './componentes/Pregunta';\nimport Contador from './componentes/Contador';\nimport Planetas from './componentes/planetas';\nimport Buscador from './componentes/buscador';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const numeros = [1, 2, 3];\n  let uno = numeros[0];\n  let dos = numeros[1];\n  let tres = numeros[2];\n  console.log(uno, dos, tres);\n  const [Uno, Dos, Tres] = numeros;\n  console.log(Uno, Dos, Tres);\n\n  /// destructuracion con un objeto\n  const persona = {\n    nombre: \"nombre de la persona\",\n    edad: 20,\n    telefono: \"+542257123456\"\n  };\n  let nombrePersona = persona.nombre;\n  console.log(nombrePersona);\n  const {\n    nombre,\n    edad,\n    telefono\n  } = persona;\n  console.log(nombre, edad, telefono);\n  const sumar = (a, b, ...c) => {\n    let resultado = a + b;\n    console.log(\"a: \" + a);\n    console.log(\"b: \" + b);\n    console.log(\"...c: \" + c);\n\n    // c es un arreglo declarado como parametro REST\n    c.forEach(numero => resultado = resultado + numero);\n    return resultado;\n  };\n  const sumar2 = (a, b) => {\n    let resultado = a + b;\n    return resultado;\n  };\n  const sumar3 = (...c) => {\n    let resultado = 0;\n\n    // c es un arreglo declarado como parametro REST\n    c.forEach(numero => resultado = resultado + numero);\n    return resultado;\n  };\n  const sumar4 = (a, b, ...c) => {\n    let resultado = a + b;\n\n    // c es un arreglo declarado como parametro REST\n    for (let i = 0; i < c.length; i++) {\n      let numero = c[i];\n      resultado = resultado + numero;\n    }\n    return resultado;\n  };\n  const array1 = [0, 1, 2, 3, 4];\n  const array2 = [5, 6, 7, 8, 9];\n  const array3 = [array1, array2];\n  const array4 = [...array1, ...array2];\n  console.log(array1);\n  console.log(array2);\n  console.log(array3);\n  console.log(array4);\n  console.log([100, ...array1, 102]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Clase 19 - React 03\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Destructuraci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"La destructuracion permite desmenuzar un objeto en sus propiedades; o un arreglo en sus posiciones a modo de poder acceder a sus propiedades sin tener que acceder por medio de la notacion de punto o \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"dotwalking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 45\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"20px\",\n        color: \"greenyellow\",\n        backgroundColor: \"black\"\n      },\n      children: \"Arreglo: Sin destructuraci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"const numeros = [1, 2, 3]; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 38\n        }, this), \"let uno = numeros[0]; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 33\n        }, this), \"let dos = numeros[1]; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }, this), \"let tres = numeros[2]; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 34\n        }, this), \"console.log(uno, dos, tres);  respuesta: \\\"1 2 3\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"20px\",\n        color: \"greenyellow\",\n        backgroundColor: \"black\"\n      },\n      children: \"Arreglo: Con destructuraci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"const [Uno, Dos, Tres] = numeros; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 45\n        }, this), \"console.log(Uno, Dos, Tres);   respuesta: \\\"1 2 3\\\".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Por cada posicion del array asigno un valor. numeros[0] va a la variable Uno, numeros[1] va a la variable Dos y numeros[2] va a la variable Tres. Estoy \\\"desgranando\\\" al arreglo y asigno a cada variable respetando la posicion del arreglo y la posicion de las variables segun como se declaren. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"20px\",\n        color: \"greenyellow\",\n        backgroundColor: \"black\"\n      },\n      children: \"Objeto: Sin destructuraci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Declaro un objeto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"const persona = \", '{', \"nombre: \\\"nombre de la persona\\\", edad: 20, telefono: \\\"+542257123456\\\"\", '};']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Mostrar datos destructurar....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"let nombrePersona = persona.nombre; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 47\n        }, this), \"console.log(nombrePersona);\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"20px\",\n        color: \"greenyellow\",\n        backgroundColor: \"black\"\n      },\n      children: \"Objeto: Con destructuraci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"A diferencia del arreglo los datos que se pasan entre \", '{ }', \" se deben llamar tal cual estan en el objeto, no se declaran como en el arreglo si no que ya se encuentran declaradas en el objeto.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"const \", '{ nombre, edad, telefono }', \" = persona; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 59\n        }, this), \"console.log(nombre, edad, telefono);   respuesta: nombre de la persona 20 +542257123456\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Par\\xE1metros \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"REST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"const sumar = (a, b) \", ' => {', \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 42\n        }, this), \"let resultado = a + b; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 36\n        }, this), \"return resultado; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 31\n        }, this), '}', \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), \"const sumar = (a, b, ...c) \", ' => {', \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 48\n        }, this), \"let resultado = a + b; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 36\n        }, this), \"c.forEach(numero \", '=>', \" resultado = resultado + numero) \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 69\n        }, this), \"return resultado; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 31\n        }, this), '}', \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"c es un arreglo declarado como parametro REST. Cuando tengo una cantidad de datos indeterminada se utiliza Rest.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Si paso una cantidad x de par\\xE1metros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (a, b), solo sumar\\xE1 los dos primeros elementos. Resultado: \", sumar2(1, 2, 3, 4, 5, 6, 7, 8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Si paso una cantidad x de par\\xE1metros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (a, b, ...c), sumar\\xE1 los dos primeros elementos y luego sumar\\xE1 el elemento del arreglo m\\xE1s el resultado previo. Resultado: \", sumar(1, 2, 3, 4, 5, 6, 7, 8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Si paso una cantidad x de par\\xE1metros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (a, b, ...c), sumar\\xE1 los dos primeros elementos y luego sumar\\xE1 el elemento del arreglo m\\xE1s el resultado previo. Resultado: \", sumar4(1, 2, 3, 4, 5, 6, 7, 8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Si paso una cantidad x de par\\xE1metros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (...c), sumar\\xE1 todos los elementos del arreglo. Resultado: \", sumar3(1, 2, 3, 4, 5, 6, 7, 8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Operador Spread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Permite expandir un elemento iterable como un arreglo, donde normalmente no se podr\\xEDa. En pocas palabras permite conservar una copia de ese elemento con el objetivo de adicionar m\\xE1s elementos en lugar de que estos reemplacen al primero.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sin operador spread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Dado dos arreglos con los siguientes items [0,1,2,3,4] y [5,6,7,8,9] se muestra la suma de los dos: [0,1,2,3,4][5,6,7,8,9]. Se agrega al nuevo arreglo el arreglo completo (corchetes incluidos) separado por una coma.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Con operador spread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Dado dos arreglos con los siguientes items [0,1,2,3,4] y [5,6,7,8,9] se muestra la suma de los dos: [0,1,2,3,4,5,6,7,8,9]. Se agrega al nuevo arreglo los elementos que contienen ambos arreglos originales.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Se puede agregar al principio o al final  [100,...array1,102] y cuyo resultado ser\\xE1: [100, 0, 1, 2, 3, 4, 102], es como un push o shift m\\xE1s rapido de construir...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"ESTADOS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Programaci\\xF3n reactiva funcional\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Reacci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Los datos bajan (desde la App hacia los componentes mas peque\\xF1os). Ejemplo: Las props.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Acci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Suben los eventos (desde los componentes hacla la App). Ejemplo: Al accionar un bot\\xF3n.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Reacci\\xF3n y acci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Un ejemplo ser\\xEDa muestro una tarjeta de un producto llamado a un componente (reacci\\xF3n), cliqueo en el boton agregar para comprar un producto (evento click el cual ser\\xE1 una acci\\xF3n) que sumar\\xE1 un dato a un objeto (ej: que se encuentra en un componente padre) y luego otra reaccion mostrando el carrito...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\xBFC\\xF3mo manejar los cambios?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Los estados permiten hacer cambios en la aplicaci\\xF3n. Los estados son todas las partes de la aplicaci\\xF3n que pueden cambiar. Es decir la informaci\\xF3n que se muestra en el sitio.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hasta ahora conomemos lo que es una variable (let y var) y lo que es una constante (const), donde se puede mostrar y cambiar un valor. Las variables se declarar\\xE1n como estados.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"En React los estados son un tipo de variables, a su vez React vigila cada cambio hasta en su m\\xEDnimo detalle. Los estados ayudar\\xE1n a que nuestra Application sea din\\xE1mica.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Propiedades del Estado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Din\\xE1mico: Va a ser cambiante, va a estar vigilado por el mismo React, para que cuando cambie \\\"reaccione\\\" y se modifique\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Privado: (Ver la clase de closures) \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: \"https://www.freecodecamp.org/espanol/news/que-es-un-closure-en-javascript/\",\n          children: \"\\xBFQue es un closure?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 49\n        }, this), \". Cada componente lo va a manejar a su gusto.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\\"Inmutable\\\": El estado no cambia a menos que se programe para ello.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Encapsulado: Otro componente no lo pueda cambiar de manera directa o en forma autom\\xE1tica.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Flujo de datos unidireccional y estados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El flujo de datos unidireccional se da con los props desde el principal hacia los componentes (App to components)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ademas del flujo de datos se le suman los estados que trabajaran de manera c\\xEDclica (React los consultar\\xE1 de manera permanente) y solo estar\\xE1n actuando solo dentro de cada componente. Los componentes est\\xE1ticos no utilizan los estados, los estados se utilizan con componentes din\\xE1micos.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Declarar y actualizar los estados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"De la manera antig\\xFCa se utilizaba los class components. En 2019 React lanz\\xF3 los Hooks. Los hooks son funciones especiales que permite trabajar con componentes. Como definirlas, ciclo de vida de un hook, referencias, context etc.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Los hooks son funciones nativas de React que permite a\\xF1adirle a los componentes funcionaliades, estas caracter\\xEDsticas estaban limitadas a los componentes de clases, antes del 2019.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"useState(): El hook que maneja el estado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Para declarar y actualizar el estado, se usa el useState()... useState() es una funci\\xF3n que crea internamente una variable donde se puede almacenar el estado de nuestro componente.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El useState acepta un valor inicial para esa variable y devuelve un arreglo con dos elementos, el valor de la variable y la funci\\xF3n para modificarla.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cuando se inicializa con un valor (dentro de los parentesis del hook useState) este texto pasa a inicializar esta variable que se declara dentro del arreglo. Ej:\", 'const [valorEstado, funcionEstado()] = useState(\"valor inicial\");']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pregunta, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Contador, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Buscador, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Pregunta","Contador","Planetas","Buscador","jsxDEV","_jsxDEV","Fragment","_Fragment","App","numeros","uno","dos","tres","console","log","Uno","Dos","Tres","persona","nombre","edad","telefono","nombrePersona","sumar","a","b","c","resultado","forEach","numero","sumar2","sumar3","sumar4","i","length","array1","array2","array3","array4","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","backgroundColor","target","href","_c","$RefreshReg$"],"sources":["/home/patricio/Escritorio/imt/numen2023/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport Pregunta from './componentes/Pregunta';\nimport Contador from './componentes/Contador';\nimport Planetas from './componentes/planetas';\nimport Buscador from './componentes/buscador';\n\nfunction App() {\n\n  const numeros = [1, 2, 3];\n  let uno = numeros[0];\n  let dos = numeros[1];\n  let tres = numeros[2];\n\n  console.log(uno, dos, tres);\n\n  const [Uno, Dos, Tres] = numeros;\n  console.log(Uno, Dos, Tres);\n\n  /// destructuracion con un objeto\n  const persona = {\n    nombre: \"nombre de la persona\",\n    edad: 20,\n    telefono: \"+542257123456\"\n  };\n\n  let nombrePersona = persona.nombre;\n  console.log(nombrePersona);\n\n  const { nombre, edad, telefono } = persona;\n  console.log(nombre, edad, telefono);\n\n  const sumar = (a, b, ...c) => {\n    let resultado = a + b;\n    console.log(\"a: \"+a);\n    console.log(\"b: \" + b);\n    console.log(\"...c: \" + c);\n    \n    // c es un arreglo declarado como parametro REST\n    c.forEach(numero => resultado = resultado + numero)\n\n    return resultado;\n  }\n\n  const sumar2 = (a, b) => {\n    let resultado = a + b;\n\n    return resultado;\n  }\n\n  const sumar3 = (...c) => {\n    let resultado = 0;\n    \n    // c es un arreglo declarado como parametro REST\n    c.forEach(numero => resultado = resultado + numero)\n\n    return resultado;\n  }\n\n  const sumar4 = (a, b, ...c) => {\n    let resultado = a + b;\n        \n    // c es un arreglo declarado como parametro REST\n    for (let i = 0; i < c.length; i++) {\n      let numero = c[i];\n      resultado = resultado + numero;\n    }\n    return resultado;\n  }\n\n  const array1 = [0, 1, 2, 3, 4];\n  const array2 = [5, 6, 7, 8, 9];\n  const array3 = [array1, array2];\n  const array4 = [...array1, ...array2];\n  console.log(array1);\n  console.log(array2);\n  console.log(array3);\n  console.log(array4);\n  console.log([100, ...array1, 102]);\n\n\n  return (\n    <>\n      <h1>Clase 19 - React 03</h1>\n      <h2>Destructuración</h2>\n      <p>La destructuracion permite desmenuzar un objeto en sus propiedades; o un arreglo\n        en sus posiciones a modo de poder acceder a sus propiedades sin tener que acceder\n        por medio de la notacion de punto o <span style={{color: \"red\"}}>dotwalking</span>.\n      </p>\n      <p style={{fontSize:\"20px\", color:\"greenyellow\", backgroundColor:\"black\"}}>Arreglo: Sin destructuración</p>\n      <pre>\n        <code>\n          const numeros = [1, 2, 3]; <br />\n          let uno = numeros[0]; <br />\n          let dos = numeros[1]; <br />\n          let tres = numeros[2]; <br />\n\n          console.log(uno, dos, tres);  respuesta: \"1 2 3\"\n        </code>\n      </pre>\n\n      <p style={{fontSize:\"20px\", color:\"greenyellow\", backgroundColor:\"black\"}}>Arreglo: Con destructuración</p>\n      <pre>\n        <code>\n          const [Uno, Dos, Tres] = numeros; <br />\n          console.log(Uno, Dos, Tres);   respuesta: \"1 2 3\".\n        </code>\n      </pre>\n      <p>Por cada posicion del array asigno un valor. numeros[0] va a la variable Uno, numeros[1]\n        va a la variable Dos y numeros[2] va a la variable Tres. Estoy \"desgranando\" al arreglo y asigno a\n        cada variable respetando la posicion del arreglo y la posicion de las variables segun como\n        se declaren. </p>\n      \n      <p style={{fontSize:\"20px\", color:\"greenyellow\", backgroundColor:\"black\"}}>Objeto: Sin destructuración</p>\n      <p>Declaro un objeto</p>\n      <pre>\n        <code>\n          const persona = {'{'}\n            nombre: \"nombre de la persona\",\n            edad: 20,\n            telefono: \"+542257123456\"\n          {'};'}\n        </code>\n      </pre>\n      <h3>Mostrar datos destructurar....</h3>\n      <pre>\n        <code>\n          let nombrePersona = persona.nombre; <br />\n          console.log(nombrePersona);\n        </code>\n      </pre>\n      <p style={{fontSize:\"20px\", color:\"greenyellow\", backgroundColor:\"black\"}}>Objeto: Con destructuración</p>\n      <p>A diferencia del arreglo los datos que se pasan entre {'{ }'} se deben llamar tal cual estan en\n        el objeto, no se declaran como en el arreglo si no que ya se encuentran declaradas en el objeto.</p>\n      <pre>\n        <code>\n          const {'{ nombre, edad, telefono }'} = persona; <br />\n            console.log(nombre, edad, telefono);   respuesta: nombre de la persona 20 +542257123456\n        </code>\n      </pre>\n\n      <h2>Parámetros <span style={{ color: \"red\" }}>REST</span></h2>\n      <pre>\n        <code>\n          const sumar = (a, b) {' => {'} <br />\n            let resultado = a + b; <br />\n            return resultado; <br />\n          {'}'} <br />\n          <br />\n          const sumar = (a, b, ...c) {' => {'} <br />\n            let resultado = a + b; <br />\n    \n            c.forEach(numero {'=>'} resultado = resultado + numero) <br />\n\n            return resultado; <br />\n          {'}'} <br />\n        </code>\n      </pre>\n      <p>c es un arreglo declarado como parametro REST. Cuando tengo una cantidad de\n        datos indeterminada se utiliza Rest. \n      </p>\n      <p>\n        Si paso una cantidad x de parámetros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (a, b),\n        solo sumará los dos primeros elementos. Resultado: {sumar2(1,2,3,4,5,6,7,8)}\n      </p>\n      <p>\n        Si paso una cantidad x de parámetros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (a, b, ...c),\n        sumará los dos primeros elementos y luego sumará el elemento del arreglo más el resultado\n        previo. Resultado: {sumar(1, 2, 3, 4, 5, 6, 7, 8)}\n      </p>\n      <p>\n        Si paso una cantidad x de parámetros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (a, b, ...c),\n        sumará los dos primeros elementos y luego sumará el elemento del arreglo más el resultado\n        previo. Resultado: {sumar4(1, 2, 3, 4, 5, 6, 7, 8)}\n      </p>\n      <p>\n        Si paso una cantidad x de parámetros: Ej. suma(1,2,3,4,5,6,7,8); y la funcion es sumar = (...c),\n        sumará todos los elementos del arreglo. Resultado: {sumar3(1, 2, 3, 4, 5, 6, 7, 8)}\n      </p>\n\n      <h2>Operador Spread</h2>\n      <p>Permite expandir un elemento iterable como un arreglo, donde normalmente no se podría. En pocas \n        palabras permite conservar una copia de ese elemento con el objetivo de adicionar más elementos \n        en lugar de que estos reemplacen al primero.\n      </p>\n      <h3>Sin operador spread</h3>\n      <p>Dado dos arreglos con los siguientes items [0,1,2,3,4] y [5,6,7,8,9] se muestra la suma de los dos: [0,1,2,3,4][5,6,7,8,9]. Se agrega al nuevo arreglo el arreglo completo (corchetes incluidos) separado por una coma.</p>\n      <h3>Con operador spread</h3>\n      <p>Dado dos arreglos con los siguientes items [0,1,2,3,4] y [5,6,7,8,9] se muestra la suma de los dos: [0,1,2,3,4,5,6,7,8,9]. Se agrega al nuevo arreglo los elementos que contienen ambos arreglos originales.</p>\n      <p>Se puede agregar al principio o al final  [100,...array1,102] y cuyo resultado será: [100, 0, 1, 2, 3, 4, 102], es como un push o shift más rapido de construir...</p>\n\n      <h2>ESTADOS</h2>\n      <h3>Programación reactiva funcional</h3>\n      <h4>Reacción</h4>\n      <p>Los datos bajan (desde la App hacia los componentes mas pequeños). Ejemplo: Las props.</p>\n      <h4>Acción</h4>\n      <p>Suben los eventos (desde los componentes hacla la App). Ejemplo: Al accionar un botón.</p>\n      <h4>Reacción y acción</h4>\n      <p>Un ejemplo sería muestro una tarjeta de un producto llamado a un componente (reacción), \n        cliqueo en el boton agregar para comprar un producto (evento click el cual será una acción) que sumará un dato a un \n        objeto (ej: que se encuentra en un componente padre) y luego otra reaccion mostrando el carrito...\n      </p>\n      <h3>¿Cómo manejar los cambios?</h3>\n      <p>Los estados permiten hacer cambios en la aplicación. Los estados son todas las partes \n        de la aplicación que pueden cambiar. Es decir la información que se muestra en el sitio.</p>\n      <p>\n        Hasta ahora conomemos lo que es una variable (let y var) y lo que es una constante (const),\n        donde se puede mostrar y cambiar un valor. Las variables se declararán como estados. \n      </p>\n      <p>\n        En React los estados son un tipo de variables, a su vez React vigila cada cambio hasta\n        en su mínimo detalle. Los estados ayudarán a que nuestra Application sea dinámica. \n      </p>\n      <h3>Propiedades del Estado</h3>\n      <ul>\n        <li>Dinámico: Va a ser cambiante, va a estar vigilado por el mismo React, para que cuando cambie \"reaccione\" y se modifique</li>\n        <li>Privado: (Ver la clase de closures) <a target='_blank' href='https://www.freecodecamp.org/espanol/news/que-es-un-closure-en-javascript/'>¿Que es un closure?</a>. Cada componente lo va a manejar a su gusto.</li>\n        <li>\"Inmutable\": El estado no cambia a menos que se programe para ello.</li>\n        <li>Encapsulado: Otro componente no lo pueda cambiar de manera directa o en forma automática.</li>\n      </ul>\n\n      <h3>Flujo de datos unidireccional y estados</h3>\n      <p>El flujo de datos unidireccional se da con los props desde el principal hacia los componentes (App to components)</p>\n      <p>Ademas del flujo de datos se le suman los estados que trabajaran de manera cíclica\n        (React los consultará de manera permanente) y solo estarán actuando solo dentro de cada componente. Los componentes\n        estáticos no utilizan los estados, los estados se utilizan con componentes dinámicos.\n      </p>\n      <h3>\n        Declarar y actualizar los estados\n      </h3>\n      <p>\n        De la manera antigüa se utilizaba los class components. En 2019 React lanzó los Hooks.\n        Los hooks son funciones especiales que permite trabajar con componentes. Como definirlas, \n        ciclo de vida de un hook, referencias, context etc.\n      </p>\n      <p>\n        Los hooks son funciones nativas de React que permite añadirle a los componentes\n        funcionaliades, estas características estaban limitadas a los componentes de clases,\n        antes del 2019.\n      </p>\n      <h2>useState(): El hook que maneja el estado</h2>\n      <p>Para declarar y actualizar el estado, se usa el useState()... useState() es una\n        función que crea internamente una variable donde se puede almacenar el estado de\n        nuestro componente.</p>\n      <p>\n        El useState acepta un valor inicial para esa variable y devuelve un arreglo con \n        dos elementos, el valor de la variable y la función para modificarla.\n      </p>\n      <p>\n        Cuando se inicializa con un valor (dentro de los parentesis del hook useState) este \n        texto pasa a inicializar esta variable que se declara dentro del arreglo. Ej: \n        {'const [valorEstado, funcionEstado()] = useState(\"valor inicial\");'}\n      </p>\n      <Pregunta />\n      <Contador />\n      {/* <Planetas /> */}\n      <Buscador />\n\n\n\n      {/* 56 minutos */}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA,OAAO,WAAW;AAClB,OAAOA,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9C,SAASC,GAAGA,CAAA,EAAG;EAEb,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzB,IAAIC,GAAG,GAAGD,OAAO,CAAC,CAAC,CAAC;EACpB,IAAIE,GAAG,GAAGF,OAAO,CAAC,CAAC,CAAC;EACpB,IAAIG,IAAI,GAAGH,OAAO,CAAC,CAAC,CAAC;EAErBI,OAAO,CAACC,GAAG,CAACJ,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;EAE3B,MAAM,CAACG,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC,GAAGR,OAAO;EAChCI,OAAO,CAACC,GAAG,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;;EAE3B;EACA,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,sBAAsB;IAC9BC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE;EACZ,CAAC;EAED,IAAIC,aAAa,GAAGJ,OAAO,CAACC,MAAM;EAClCN,OAAO,CAACC,GAAG,CAACQ,aAAa,CAAC;EAE1B,MAAM;IAAEH,MAAM;IAAEC,IAAI;IAAEC;EAAS,CAAC,GAAGH,OAAO;EAC1CL,OAAO,CAACC,GAAG,CAACK,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC;EAEnC,MAAME,KAAK,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAE,GAAGC,CAAC,KAAK;IAC5B,IAAIC,SAAS,GAAGH,CAAC,GAAGC,CAAC;IACrBZ,OAAO,CAACC,GAAG,CAAC,KAAK,GAACU,CAAC,CAAC;IACpBX,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGW,CAAC,CAAC;IACtBZ,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGY,CAAC,CAAC;;IAEzB;IACAA,CAAC,CAACE,OAAO,CAACC,MAAM,IAAIF,SAAS,GAAGA,SAAS,GAAGE,MAAM,CAAC;IAEnD,OAAOF,SAAS;EAClB,CAAC;EAED,MAAMG,MAAM,GAAGA,CAACN,CAAC,EAAEC,CAAC,KAAK;IACvB,IAAIE,SAAS,GAAGH,CAAC,GAAGC,CAAC;IAErB,OAAOE,SAAS;EAClB,CAAC;EAED,MAAMI,MAAM,GAAGA,CAAC,GAAGL,CAAC,KAAK;IACvB,IAAIC,SAAS,GAAG,CAAC;;IAEjB;IACAD,CAAC,CAACE,OAAO,CAACC,MAAM,IAAIF,SAAS,GAAGA,SAAS,GAAGE,MAAM,CAAC;IAEnD,OAAOF,SAAS;EAClB,CAAC;EAED,MAAMK,MAAM,GAAGA,CAACR,CAAC,EAAEC,CAAC,EAAE,GAAGC,CAAC,KAAK;IAC7B,IAAIC,SAAS,GAAGH,CAAC,GAAGC,CAAC;;IAErB;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MACjC,IAAIJ,MAAM,GAAGH,CAAC,CAACO,CAAC,CAAC;MACjBN,SAAS,GAAGA,SAAS,GAAGE,MAAM;IAChC;IACA,OAAOF,SAAS;EAClB,CAAC;EAED,MAAMQ,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9B,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9B,MAAMC,MAAM,GAAG,CAACF,MAAM,EAAEC,MAAM,CAAC;EAC/B,MAAME,MAAM,GAAG,CAAC,GAAGH,MAAM,EAAE,GAAGC,MAAM,CAAC;EACrCvB,OAAO,CAACC,GAAG,CAACqB,MAAM,CAAC;EACnBtB,OAAO,CAACC,GAAG,CAACsB,MAAM,CAAC;EACnBvB,OAAO,CAACC,GAAG,CAACuB,MAAM,CAAC;EACnBxB,OAAO,CAACC,GAAG,CAACwB,MAAM,CAAC;EACnBzB,OAAO,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAGqB,MAAM,EAAE,GAAG,CAAC,CAAC;EAGlC,oBACE9B,OAAA,CAAAE,SAAA;IAAAgC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BtC,OAAA;MAAAkC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBtC,OAAA;MAAAkC,QAAA,GAAG,yMAEmC,eAAAlC,OAAA;QAAMuC,KAAK,EAAE;UAACC,KAAK,EAAE;QAAK,CAAE;QAAAN,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KACpF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAGuC,KAAK,EAAE;QAACE,QAAQ,EAAC,MAAM;QAAED,KAAK,EAAC,aAAa;QAAEE,eAAe,EAAC;MAAO,CAAE;MAAAR,QAAA,EAAC;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3GtC,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAAkC,QAAA,GAAM,6BACuB,eAAAlC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,0BACX,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,0BACN,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,2BACL,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,sDAG/B;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAENtC,OAAA;MAAGuC,KAAK,EAAE;QAACE,QAAQ,EAAC,MAAM;QAAED,KAAK,EAAC,aAAa;QAAEE,eAAe,EAAC;MAAO,CAAE;MAAAR,QAAA,EAAC;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3GtC,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAAkC,QAAA,GAAM,oCAC8B,eAAAlC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,wDAE1C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNtC,OAAA;MAAAkC,QAAA,EAAG;IAGY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEnBtC,OAAA;MAAGuC,KAAK,EAAE;QAACE,QAAQ,EAAC,MAAM;QAAED,KAAK,EAAC,aAAa;QAAEE,eAAe,EAAC;MAAO,CAAE;MAAAR,QAAA,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC1GtC,OAAA;MAAAkC,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACxBtC,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAAkC,QAAA,GAAM,kBACY,EAAC,GAAG,EAAC,yEAIrB,EAAC,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNtC,OAAA;MAAAkC,QAAA,EAAI;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvCtC,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAAkC,QAAA,GAAM,sCACgC,eAAAlC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,+BAE5C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNtC,OAAA;MAAGuC,KAAK,EAAE;QAACE,QAAQ,EAAC,MAAM;QAAED,KAAK,EAAC,aAAa;QAAEE,eAAe,EAAC;MAAO,CAAE;MAAAR,QAAA,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC1GtC,OAAA;MAAAkC,QAAA,GAAG,wDAAsD,EAAC,KAAK,EAAC,qIACkC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACtGtC,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAAkC,QAAA,GAAM,QACE,EAAC,4BAA4B,EAAC,cAAY,eAAAlC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,2FAExD;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAENtC,OAAA;MAAAkC,QAAA,GAAI,gBAAW,eAAAlC,OAAA;QAAMuC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAN,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9DtC,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAAkC,QAAA,GAAM,uBACiB,EAAC,OAAO,EAAC,GAAC,eAAAlC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,2BACZ,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,sBACX,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACzB,GAAG,EAAC,GAAC,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACZtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,+BACqB,EAAC,OAAO,EAAC,GAAC,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,2BAClB,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,qBAEZ,EAAC,IAAI,EAAC,mCAAiC,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,sBAE5C,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACzB,GAAG,EAAC,GAAC,eAAAtC,OAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNtC,OAAA;MAAAkC,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,GAAG,4JAEkD,EAACT,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CAAC,eACJtC,OAAA;MAAAkC,QAAA,GAAG,kOAGkB,EAAChB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACJtC,OAAA;MAAAkC,QAAA,GAAG,kOAGkB,EAACP,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eACJtC,OAAA;MAAAkC,QAAA,GAAG,4JAEkD,EAACR,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjF,CAAC,eAEJtC,OAAA;MAAAkC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBtC,OAAA;MAAAkC,QAAA,EAAG;IAGH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BtC,OAAA;MAAAkC,QAAA,EAAG;IAAuN;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC9NtC,OAAA;MAAAkC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BtC,OAAA;MAAAkC,QAAA,EAAG;IAA4M;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACnNtC,OAAA;MAAAkC,QAAA,EAAG;IAAkK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEzKtC,OAAA;MAAAkC,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBtC,OAAA;MAAAkC,QAAA,EAAI;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCtC,OAAA;MAAAkC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBtC,OAAA;MAAAkC,QAAA,EAAG;IAAsF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7FtC,OAAA;MAAAkC,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACftC,OAAA;MAAAkC,QAAA,EAAG;IAAsF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7FtC,OAAA;MAAAkC,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BtC,OAAA;MAAAkC,QAAA,EAAG;IAGH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCtC,OAAA;MAAAkC,QAAA,EAAG;IACuF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC9FtC,OAAA;MAAAkC,QAAA,EAAG;IAGH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,EAAG;IAGH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BtC,OAAA;MAAAkC,QAAA,gBACElC,OAAA;QAAAkC,QAAA,EAAI;MAAuH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChItC,OAAA;QAAAkC,QAAA,GAAI,sCAAoC,eAAAlC,OAAA;UAAG2C,MAAM,EAAC,QAAQ;UAACC,IAAI,EAAC,4EAA4E;UAAAV,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,iDAA6C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtNtC,OAAA;QAAAkC,QAAA,EAAI;MAAmE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5EtC,OAAA;QAAAkC,QAAA,EAAI;MAAyF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChG,CAAC,eAELtC,OAAA;MAAAkC,QAAA,EAAI;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDtC,OAAA;MAAAkC,QAAA,EAAG;IAAiH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACxHtC,OAAA;MAAAkC,QAAA,EAAG;IAGH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,EAAI;IAEJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLtC,OAAA;MAAAkC,QAAA,EAAG;IAIH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,EAAG;IAIH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,EAAI;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjDtC,OAAA;MAAAkC,QAAA,EAAG;IAEkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACzBtC,OAAA;MAAAkC,QAAA,EAAG;IAGH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJtC,OAAA;MAAAkC,QAAA,GAAG,mKAGD,EAAC,mEAAmE;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC,eACJtC,OAAA,CAACL,QAAQ;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACZtC,OAAA,CAACJ,QAAQ;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEZtC,OAAA,CAACF,QAAQ;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAKZ,CAAC;AAEP;AAACO,EAAA,GAhQQ1C,GAAG;AAkQZ,eAAeA,GAAG;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}